@using System.ComponentModel
@using Microsoft.Extensions.AI
@using System.ComponentModel.DataAnnotations
@inject IChatClient ChatClient
@inject NavigationManager Nav
@implements IDisposable
<div style="width: 100%">
    <CascadingValue Value="@this" IsFixed="true">
        <ChatHeader OnNewChat="@ResetConversationAsync" DebugMode="true"/>
    </CascadingValue>
    <CascadingValue Value="@this">
        <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
            <NoMessagesContent>
                <div>@InitialText</div>
            </NoMessagesContent>
        </ChatMessageList>
    </CascadingValue>
</div>

<div class="chat-container">
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {

    [Parameter]
    public string InitialText { get; set; } = "Hello";

    [Parameter]
    public string Index { get; set; } = "default";

    [Parameter]
    public string UserId { get; set; } = "default";

    // Event handler for copy signal
    [Parameter]
    public EventCallback<string> OnCopy { get; set; }

    private readonly ChatOptions chatOptions = new();
    public readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage = null;
    private ChatInput? chatInput;
    private string? currentId;

    override protected async Task OnInitializedAsync()
    {
        currentId = Guid.NewGuid().ToString();
        chatOptions.ConversationId = currentId;
        chatOptions.AdditionalProperties ??= new ();
        chatOptions.AdditionalProperties["Index"] = Index;
        chatOptions.AdditionalProperties["UserId"] = UserId;
        // Kick off the conversation with the initial text
        var resp = await ChatClient.GetResponseAsync(new List<ChatMessage>(), chatOptions);
        messages.AddMessages(resp);
    }

    public async Task AddUserMessageAsync(ChatMessage userMessage)
    {

        // Add the user message to the conversation
        messages.Add(userMessage);
        await chatInput!.FocusAsync();

        // Display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseCancellation = new();
        var requestMessages = messages.ToArray();
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        var resp = await ChatClient.GetResponseAsync(requestMessages, chatOptions, currentResponseCancellation.Token);
        currentResponseMessage = null;
        messages.AddMessages(resp);
        StateHasChanged();
    }

    private async Task ResetConversationAsync()
    {
        currentId = Guid.NewGuid().ToString();
        chatOptions.ConversationId = currentId;
        messages.Clear();
        messages.Add(new ChatMessage(ChatRole.Assistant, InitialText));
        await chatInput!.FocusAsync();
    }

    public async Task LoadMessages(List<ChatMessage> messages)
    {
        currentId = Guid.NewGuid().ToString();
        chatOptions.ConversationId = currentId;
        this.messages.Clear();
        //disable chatInput while loading messages
        foreach(var message in messages.Where(m => m.Role == ChatRole.User ))
        {
            await AddUserMessageAsync(message);
        }
        // Re-enable chatInput after loading messages
        await chatInput!.FocusAsync();
    }

    public async Task SignalCopy(string text)
    {
        if (OnCopy.HasDelegate)
        {
            await OnCopy.InvokeAsync(text);
        }
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
